    public function getPostsByFilter(string $column, string $parameter)
    {
        if ($column == "id" && $parameter) {
            return $this->database->table($this->postsRepository->getTable())->where($column, $parameter)->fetchAll();
        }

        if ($column == "user_id" && $parameter) //parameter je jméno a ne id, uživateli se totiž bude líp hledat podle jména a ne podle id
        {
            $user = $this->usersRepository->getRowByUsername($parameter); //takže podle jména najdu usera
            if ($user) {
                return $this->database->table($this->postsRepository->getTable())->where($column, $user->id)->fetchAll();   //a podle jeho id vyhledam record v db
            }
            return $this->database->table($this->postsRepository->getTable())->where($column, "")->fetchAll();  //vyhodí 0 záznamů pokud v se db nic nenašlo podle parametru
        }
        return $this->database->table($this->postsRepository->getTable())->where("{$column} LIKE ?", "%$parameter%")->fetchAll();   //i když dostane prázdnej string tak to vrátí všechno, protože LIKE vrací záznamy co obsahujou někde to cos zadal, proto u samotnáho WHERE to s "" vyhodí nic, protože se ptáš "vyhoď řádek co má v danym sloupci jenom hodnotu nic"
    }




//likeFacade.php
        if ($column == "user_id" && $parameter) //parameter je jméno a ne id, uživateli se totiž bude líp hledat podle jména a ne podle id
        {
            $user = $this->usersRepository->getRowByUsername($parameter); //takže podle jména najdu usera
            if ($user) {
                return $this->database->table($this->likesRepository->getTable())->where($column, $user->id)->fetchAll(); //a podle jeho id vyhledam record postu v db
            }
            return $this->database->table($this->likesRepository->getTable())->where($column, "")->fetchAll();  //vyhodí 0 záznamů pokud v se db nic nenašlo podle parametru
        }

        if ($posts) {
            $likesToRender = [];
            foreach ($posts as $post) {
                $foundLikeRecordsByPostId = $this->database->table($this->likesRepository->getTable())->where($column, $post->id)->fetchAll();
                if ($foundLikeRecordsByPostId) {
                    $likesToRender[] = $foundLikeRecordsByPostId;   //pokud v db table likes najdu like co má post_id jako id jednoho z postů co jsem našel podle jména, tak ho vyrenderuju, jinak to znamená že ten post nemá likes, takže ho nerederuju
                }
            }
            bdump($likesToRender);
            return $likesToRender;
        }
        return $this->database->table($this->likesRepository->getTable())->where($column, "")->fetchAll();  //vyhodí 0 záznamů pokud v se db nic nenašlo podle parametru





//AdminPresenter.php
        public function renderSearch($dbName): void    //zatim neni nikde využitá
    {
        $q = $this->getParameter("q");
        bdump($dbName);
        bdump("jou");
    }

    public function renderDatabase($dbName): void
    {
        $this->template->dbName = $dbName;
        $q = $this->getParameter("q");
        bdump($q);
        bdump($dbName);
        $data = [];
        $data = $this->getAllByTableName($dbName);
        bdump($data);
        //$this->template->data = $data;

        //DEBUG
        foreach($data as $line){
            $lineData = $line->toArray();
            //bdump($lineData);
            foreach ($lineData as $column => $value) {
                bdump ("Column: $column, Value: $value");
            }
        }
        $this->template->data = $this->filterColumns($data, $dbName); 



            
    }



//šipečka back na previous url
    <a href="{$presenter->getSession()->getSection('navigation')->previousUrl}"></a>




//HomepagePresenter.php
    public function renderOlddefault(): void
    {	
		$numberOfPosts = $this->postsRepository->getNumberOfRows();	//získá počet všech záznamů z tabulky posts
		$this->template->postsArray = $this->postsRepository->getSomePostsFromEnd($this->postsPerPage, 0);	//vezme z konce tabulky (jedem tedy od nejnovější po nejstarší) "howMany" postů a přeskočí "from" postů, vezme to tedy posty se co se dané stránce zobrazí
		$this->template->pages = $this->getNumberOfPages();

		bdump($this->currentUser->hasPremiumAccess());

		//DEBUG
		bdump($numberOfPosts);
		bdump((int) $numberOfPosts/$this->postsPerPage + $this->restPage($numberOfPosts));
		bdump((int) $numberOfPosts/$this->postsPerPage);
		bdump((int) $numberOfPosts%$this->postsPerPage);
		bdump($this->restPage($numberOfPosts));
    }

	public function renderPage(int $page)	//vezme číslo page, na kterou má skočit
	{
		
		$this->template->postsArray = $this->postsRepository->getSomePostsFromEnd($this->postsPerPage, ($page-1)*$this->postsPerPage);	//vezme "postsPerPage" postů od pozice page na kterou skočit -1 bcs se jede od 0
		bdump($page);
		$this->template->page =$page;	//tempplatu se předá aktuální page na kterou se skáče
		$numberOfPosts = $this->postsRepository->getNumberOfRows();
		$this->template->pages = $this->getNumberOfPages();
		bdump((int) $numberOfPosts/$this->postsPerPage + $this->restPage($numberOfPosts));
	}






/page.latte
{block content}
<h1>Homepage</h1>
<a n:href="Edit:create" n:if="$user->isAllowed('post', 'add')" class="btn btn-primary">Vytvořit příspěvek</a>

	
	<div n:foreach="$postsArray as $post" class="post">
        <h2><a n:href="Post:show $post->id">{$post->title}</a></h2>

		<div n:if="$post->image"><img src="{$post->image}"></div>

		<div class="date">{$post->created_at|date:'F j, Y'}</div>

		<div>{$post->content|truncate:256|noescape}</div>
	</div>
    
	{*{for $i = 0; $i < $pages; $i++}
		<a n:href="Homepage:page page => $i+1">{$i+1}</a>
	{/for}*}
    

    <div class="pageSelector">
        {if $page > 1}
        <a n:href="Homepage:page page => 1" class="btn btn-outline-primary"><<</a>
        <a n:href="Homepage:page page => $page-1" class="btn btn-outline-primary"><</a>
        {/if}
        <a>{$page}/{$pages}</a>
        {if $page < $pages}
        <a n:href="Homepage:page page => $page+1" class="btn btn-outline-primary">></a>
        <a n:href="Homepage:page page => $pages" class="btn btn-outline-primary">>></a>
        {/if}
    </div>

    {control pageForm}


//olddefault.latte
{block content}
<h1>Homepage</h1>
<a n:href="Edit:create" n:if="$user->isAllowed('post', 'add')" class="btn btn-primary">Vytvořit příspěvek</a>



	
	<div n:foreach="$postsArray as $post" class="post">
        <h2><a n:href="Post:show $post->id">{$post->title}</a></h2>

		<div n:if="$post->image"><img src="{$post->image}"></div>

		<div class="date">{$post->created_at|date:'F j, Y'}</div>

		<div class="postContent">{$post->content|truncate:256|noescape}</div>
	</div>
	{*{for $page = 0; $page < $pages; $page++}
		<a n:href="Homepage:page page => $page+1">{$page+1}</a>
	{/for}*}




	{control paginator}
	<div class="pageSelector">
        <a>1/{$pages}</a>
        <a n:href="Homepage:page page => 2" class="btn btn-outline-primary">></a>
        <a n:href="Homepage:page page => $pages" class="btn btn-outline-primary">>></a>
    </div>

    {control pageForm}




//Post:show
	{snippet "commentFormSnippet-$comment->id"}
		{if $showReplyCommentForm == "true" && $comment->id == $replyCommentId}
			Odpovědět uživateli {$comment->name}:
			{control commentForm}
		{/if}
	{/snippet}

    <a n:href="reply!, commentId => $comment->id" n:if="$user->isLoggedIn()" class="btn btn-primary">Odpovědět na komentář OLD</a>